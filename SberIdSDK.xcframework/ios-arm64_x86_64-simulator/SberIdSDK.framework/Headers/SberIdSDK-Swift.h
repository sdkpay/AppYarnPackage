#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef SBERIDSDK_SWIFT_H
#define SBERIDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import ObjectiveC;
@import SafariServices;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SberIdSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, AuthServiceType, open) {
  AuthServiceTypeYandex = 0,
  AuthServiceTypeGoogle = 1,
  AuthServiceTypeApple = 2,
  AuthServiceTypeFacebook = 3,
  AuthServiceTypeVk = 4,
  AuthServiceTypeOk = 5,
  AuthServiceTypeAvito = 6,
  AuthServiceTypeInstagram = 7,
  AuthServiceTypeGosUslugi = 8,
  AuthServiceTypeMailRu = 9,
  AuthServiceTypeMyMoscow = 10,
  AuthServiceTypeLocal = 11,
};








typedef SWIFT_ENUM(NSInteger, CornerRadiusStyle, open) {
  CornerRadiusStyleNo = 0,
  CornerRadiusStyleNormal = 1,
  CornerRadiusStyleMax = 2,
};



SWIFT_PROTOCOL("_TtP9SberIdSDK27LoginButtonObserverProtocol_") SWIFT_AVAILABILITY(ios,unavailable,message="'LoginButtonObserverProtocol' has been renamed to '_TtP9SberIdSDK30SIDLoginButtonObserverProtocol_'")
@protocol LoginButtonObserverProtocol
@end

typedef SWIFT_ENUM(NSInteger, LoginButtonStyle, open) {
  LoginButtonStyleGreen = 0,
  LoginButtonStyleWhite = 1,
};

typedef SWIFT_ENUM(NSInteger, LoginButtonTextType, open) {
  LoginButtonTextTypeShort = 0,
  LoginButtonTextTypeGeneral = 1,
  LoginButtonTextTypeFilling = 2,
  LoginButtonTextTypePursue = 3,
};




@class SIDInitializer;
@class SIDSettings;
@class SIDLogin;

/// Фасад Сбер ID SDK
SWIFT_CLASS("_TtC9SberIdSDK3SID")
@interface SID : NSObject
/// Инициализатор Сбер ID SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SIDInitializer * _Nonnull initializer;)
+ (SIDInitializer * _Nonnull)initializer SWIFT_WARN_UNUSED_RESULT;
/// Настройки SID, позволяющие конфигурировать параметры SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SIDSettings * _Nonnull settings;)
+ (SIDSettings * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Логика входа в систему
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SIDLogin * _Nonnull login;)
+ (SIDLogin * _Nonnull)login SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
enum SIDStandType : NSInteger;
@class UIColor;
@class SIDUIPreferences;
@class SIDAuthRequest;
@class UIViewController;
@class NSURL;
@class SIDAuthResponse;
enum SIDResult : NSInteger;
enum SIDUserAuthorizationType : NSInteger;
enum SIDAuthServiceType : NSInteger;

@interface SID (SWIFT_EXTENSION(SberIdSDK))
+ (void)initSberIDWithClientId:(NSString * _Nonnull)clientId standType:(enum SIDStandType)standType appName:(NSString * _Nonnull)appName partnerProfileUrl:(NSString * _Nullable)partnerProfileUrl themeColorLight:(UIColor * _Nullable)themeColorLight themeColorDark:(UIColor * _Nullable)themeColorDark SWIFT_METHOD_FAMILY(none) SWIFT_DEPRECATED_MSG("\n\t\nДля инициализации используйте единожды - SID.initializer.initialize()\n\tДля установки основных настроек - SID.settings.applyMainPreferences(...)\n\tДля установки настроек UI - SID.settings.applyUIPreferences(...)\n\t");
+ (void)initSberIDWithClientId:(NSString * _Nonnull)clientId standType:(enum SIDStandType)standType profileUrl:(NSString * _Nullable)profileUrl uiPreferences:(SIDUIPreferences * _Nullable)uiPreferences SWIFT_METHOD_FAMILY(none) SWIFT_DEPRECATED_MSG("\n\t\nДля инициализации используйте единожды - SID.initializer.initialize()\n\tДля установки основных настроек - SID.settings.applyMainPreferences(...)\n\tДля установки настроек UI - SID.settings.applyUIPreferences(...)\n\t");
+ (void)authWithSberId:(SIDAuthRequest * _Nonnull)request viewController:(UIViewController * _Nonnull)viewController SWIFT_DEPRECATED_MSG("\n\t\nДля авторизации используйте метод SID.login.auth(...)\n\t", "SID.login.auth");
+ (void)autoAuthWithRequest:(SIDAuthRequest * _Nonnull)request completion:(void (^ _Nonnull)(BOOL))completion SWIFT_DEPRECATED_MSG("\n\t\nДля авторизации используйте метод SID.login.autoAuth(...)\n\t", "SID.login.autoAuth");
+ (BOOL)soleLoginWebPageAuthWithSberIdRequest:(SIDAuthRequest * _Nonnull)request svcRedirectUrlString:(NSString * _Nonnull)svcRedirectUrlString viewController:(UIViewController * _Nonnull)viewController SWIFT_DEPRECATED_MSG("\n\t\nДля авторизации используйте метод SID.login.webAuth(...)\n\t", "SID.login.webAuth");
+ (void)setUserID:(NSString * _Nonnull)userID SWIFT_DEPRECATED_MSG("\n\t\nДля установки UserID используйте метод SID.settings.applyMainPreferences(userID:)\n\t", "SID.settings.applyMainPreferences");
+ (void)setClientID:(NSString * _Nonnull)clientId SWIFT_DEPRECATED_MSG("\n\t\nДля установки ClientID используйте метод SID.settings.applyMainPreferences(clientID:)\n\t", "SID.settings.applyMainPreferences");
+ (void)getResponseFrom:(NSURL * _Nonnull)url completion:(SWIFT_NOESCAPE void (^ _Nonnull)(SIDAuthResponse * _Nonnull))completion SWIFT_DEPRECATED_MSG("\n\t\nДля получения модели ответа используйте метод SID.login.getResponseFrom(...)\n\t", "SID.login.getResponseFrom");
+ (void)deleteAppToken SWIFT_DEPRECATED_MSG("\n\t\nДля удаления токена используйте метод SID.login.deleteAppToken()\n\t", "SID.login.deleteAppToken");
+ (void)sendOtherAuthWithServiceName:(NSString * _Nonnull)serviceName result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType SWIFT_DEPRECATED_MSG("\n\t\nДля отправки метрики используйте метод SID.login.sendOtherAuth(...)\n\t", "SID.login.sendOtherAuth");
+ (void)sendOtherAuthWithService:(enum SIDAuthServiceType)service result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType SWIFT_DEPRECATED_MSG("\n\t\nДля отправки метрики используйте метод SID.login.sendOtherAuth(...)\n\t", "SID.login.sendOtherAuth");
@end


/// Протокол <code>SIDAnalyticEventHandler</code> предназначен для обработки событий аналитики,
/// таких как открытие ссылок или другие важные действия пользователей, которые следует отслеживать.
SWIFT_PROTOCOL("_TtP9SberIdSDK23SIDAnalyticEventHandler_")
@protocol SIDAnalyticEventHandler
/// Обрабатывает событие открытия ссылки.
/// \param url URL-адрес, который был открыт.
/// Этот метод вызывается, когда пользователь переходит по ссылке.
///
- (void)handleOpeningEventWithUrl:(NSString * _Nonnull)url;
@end


/// Модель запроса
SWIFT_CLASS("_TtC9SberIdSDK18SIDAppTokenRequest")
@interface SIDAppTokenRequest : NSObject
/// Наименование групп данных, на которые подписана система
@property (nonatomic, copy) NSString * _Nonnull scope;
/// Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
@property (nonatomic, copy) NSString * _Nonnull state;
/// Значение, сгенерированное внешней АС для предотвращения атак повторения
@property (nonatomic, copy) NSString * _Nonnull nonce;
/// Адрес на который будет перенаправлен клиент после успешной аутентификации (deeplink)
@property (nonatomic, copy) NSString * _Nonnull redirectUri;
/// Хэшированное значение секретного кода
@property (nonatomic, copy) NSString * _Nullable codeChallenge;
/// Метод преобразования секретного кода
@property (nonatomic, copy) NSString * _Nullable codeChallengeMethod;
/// Инициализатор
/// \param scope Наименование групп данных, на которые подписана система
///
/// \param state Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
///
/// \param nonce Значение, сгенерированное внешней АС для предотвращения атак повторения
///
/// \param redirectUri Url на который будет перенаправлен клиент после успешной аутентификации (deeplink)
///
/// \param codeChallenge Хэшированное значение секретного кода
///
/// \param codeChallengeMethod Метод преобразования секретного кода
///
- (nonnull instancetype)initWithScope:(NSString * _Nonnull)scope state:(NSString * _Nonnull)state nonce:(NSString * _Nonnull)nonce redirectUri:(NSString * _Nonnull)redirectUri codeChallenge:(NSString * _Nullable)codeChallenge codeChallengeMethod:(NSString * _Nullable)codeChallengeMethod OBJC_DESIGNATED_INITIALIZER;
/// Инициализатор. Инициирует
/// clientId, scope, state, nonce, redirectUri, codeChallenge, codeChallengeMethod - пустыми строками
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Объект ответа AppToken
SWIFT_CLASS("_TtC9SberIdSDK19SIDAppTokenResponse")
@interface SIDAppTokenResponse : NSObject
/// Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Код авторизации клиента
@property (nonatomic, readonly, copy) NSString * _Nullable authCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9SberIdSDK14SIDAuthManager") SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="'SIDAuthManager' has been renamed to '_TtC9SberIdSDK3SID'")
@interface SIDAuthManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Модель запроса
SWIFT_CLASS("_TtC9SberIdSDK14SIDAuthRequest")
@interface SIDAuthRequest : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull challengeMethod;)
+ (NSString * _Nonnull)challengeMethod SWIFT_WARN_UNUSED_RESULT;
/// Наименование групп данных, на которые подписана система
@property (nonatomic, copy) NSString * _Nonnull scope;
/// Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
@property (nonatomic, copy) NSString * _Nonnull state;
/// Значение, сгенерированное внешней АС для предотвращения атак повторения
@property (nonatomic, copy) NSString * _Nonnull nonce;
/// Адрес на который будет перенаправлен клиент после успешной аутентификации (deeplink)
@property (nonatomic, copy) NSString * _Nonnull redirectUri;
/// URI, который будет использован для запуска авторизации взамен дефолтного
@property (nonatomic, copy) NSString * _Nullable ssoBaseUrl;
/// Хэшированное значение секретного кода
@property (nonatomic, copy) NSString * _Nullable codeChallenge;
/// Метод преобразования секретного кода
@property (nonatomic, copy) NSString * _Nullable codeChallengeMethod;
/// Номер телефона пользователя “79ХХХХХХХХХ”
@property (nonatomic, copy) NSString * _Nullable loginHint;
/// Инициализатор
/// \param scope Наименование групп данных, на которые подписана система
///
/// \param state Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
///
/// \param nonce Значение, сгенерированное внешней АС для предотвращения атак повторения
///
/// \param ssoBaseUrl Url для отправки запроса, если nil - будет исопльзовано значение по умолчанию
///
/// \param redirectUri Url на который будет перенаправлен клиент после успешной аутентификации (deeplink)
///
/// \param codeChallenge Хэшированное значение секретного кода
///
/// \param codeChallengeMethod Метод преобразования секретного кода
///
/// \param standType Тип стэнда к которому будет выполняться подключение
///
/// \param loginHint Номер телефона пользователя “79ХХХХХХХХХ”
///
- (nonnull instancetype)initWithScope:(NSString * _Nonnull)scope state:(NSString * _Nonnull)state nonce:(NSString * _Nonnull)nonce redirectUri:(NSString * _Nonnull)redirectUri ssoBaseUrl:(NSString * _Nullable)ssoBaseUrl codeChallenge:(NSString * _Nullable)codeChallenge codeChallengeMethod:(NSString * _Nullable)codeChallengeMethod loginHint:(NSString * _Nullable)loginHint OBJC_DESIGNATED_INITIALIZER;
/// Инициализатор. Инициирует
/// scope, state, nonce, redirectUri, codeChallenge, codeChallengeMethod - пустыми строками
/// ssoBaseUrl - nil
/// standType - .prom
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Объект ответа авторизации
SWIFT_CLASS("_TtC9SberIdSDK15SIDAuthResponse")
@interface SIDAuthResponse : NSObject
/// Статус операции
@property (nonatomic, readonly) BOOL isSuccess;
/// Значение, сгенерированное внешней АС для предотвращения атак повторения
@property (nonatomic, readonly, copy) NSString * _Nonnull nonce;
/// Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Код авторизации клиента
@property (nonatomic, readonly, copy) NSString * _Nullable authCode;
/// AppToken для бесшовной авторизации
@property (nonatomic, readonly, copy) NSString * _Nullable appToken;
/// Текст ошибки
@property (nonatomic, readonly, copy) NSString * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Перечисление сервисов авторизации, отличные от Сбер ID
typedef SWIFT_ENUM(NSInteger, SIDAuthServiceType, open) {
/// Яндекс
  SIDAuthServiceTypeYandex = 0,
/// Google
  SIDAuthServiceTypeGoogle = 1,
/// Apple
  SIDAuthServiceTypeApple = 2,
/// Facebook
  SIDAuthServiceTypeFacebook = 3,
/// ВКонтакте
  SIDAuthServiceTypeVk = 4,
/// Одноклассники
  SIDAuthServiceTypeOk = 5,
/// Авито
  SIDAuthServiceTypeAvito = 6,
/// Инстаграм
  SIDAuthServiceTypeInstagram = 7,
/// ГосУлуги
  SIDAuthServiceTypeGosUslugi = 8,
/// Mail.ru
  SIDAuthServiceTypeMailRu = 9,
/// Моя Москва
  SIDAuthServiceTypeMyMoscow = 10,
/// Локальная учетная запись
  SIDAuthServiceTypeLocal = 11,
};


/// Цвета интерфейса Сбер ID
SWIFT_CLASS("_TtC9SberIdSDK8SIDColor")
@interface SIDColor : NSObject
/// Цвет для светлой темы.
@property (nonatomic, strong) UIColor * _Nonnull light;
/// Цвет для темной темы.
@property (nonatomic, strong) UIColor * _Nonnull dark;
/// Инициализирует объект с указанными цветами для светлой и темной темы.
- (nonnull instancetype)initWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Стиль скругления углов кнопки
typedef SWIFT_ENUM(NSInteger, SIDCornerRadiusStyle, open) {
/// Отсутствует
  SIDCornerRadiusStyleNo = 0,
/// Радиус = 4
  SIDCornerRadiusStyleNormal = 1,
/// Радиус = высота кнопки / 2
  SIDCornerRadiusStyleMax = 2,
};

@class UIFont;

/// Шрифты, используемые в интерфейсе Сбер ID.
SWIFT_CLASS("_TtC9SberIdSDK8SIDFonts")
@interface SIDFonts : NSObject
/// Инициализатор, позволяющий задать шрифты для интерфейса.
- (nonnull instancetype)initWithSemiboldFont:(UIFont * _Nullable)semiboldFont mediumFont:(UIFont * _Nullable)mediumFont OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Инициализатор Сбер ID SDK
SWIFT_CLASS("_TtC9SberIdSDK14SIDInitializer")
@interface SIDInitializer : NSObject
/// Инициализация Сбер ID SDK
- (void)initialize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Логика входа в систему
SWIFT_CLASS("_TtC9SberIdSDK8SIDLogin")
@interface SIDLogin : NSObject
/// Приоритетная авторизоваться с помощью Сбербанк Онлайн
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: модель запроса
///   </li>
///   <li>
///     viewController: viewController для открытия SVC для авторизации через Web при отсутсвии приложения СБОЛ
///   </li>
/// </ul>
- (void)authWithSberId:(SIDAuthRequest * _Nonnull)request viewController:(UIViewController * _Nonnull)viewController;
/// Авторизация напрямую (без UI) через  Сбербанк Онлайн
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: модель запроса
///   </li>
///   <li>
///     completion: Обработчик результата открытия СБОЛа
///   </li>
/// </ul>
- (void)autoAuthWithRequest:(SIDAuthRequest * _Nonnull)request completion:(void (^ _Nonnull)(BOOL))completion;
/// Приоритетная авторизации пользователя по Сбер ID, используя единое веб окно авторизации.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sberIdRequest: модель запроса
///   </li>
///   <li>
///     svcRedirectUrlString: URL для возврата из СБОЛа в МП партнера на откртый SVC
///     со страницей единого портала авторизации
///   </li>
///   <li>
///     viewController: viewController необходимый для открытия SafariViewController
///   </li>
/// </ul>
///
/// returns:
/// статус успеха запуска авторизации
- (BOOL)webAuthWithSberIdRequest:(SIDAuthRequest * _Nonnull)request svcRedirectUrlString:(NSString * _Nonnull)svcRedirectUrlString viewController:(UIViewController * _Nonnull)viewController;
/// Получить объект ответа
/// \param url url с которого был переход
///
/// \param completion блок, возвращающий объект ответа
///
- (void)getResponseFrom:(NSURL * _Nonnull)url completion:(SWIFT_NOESCAPE void (^ _Nonnull)(SIDAuthResponse * _Nonnull))completion;
/// Передать метрики использования сервисов авторизации, отличных от Сбер ID
/// \param serviceName название сервиса, который использовал пользователь
///
/// \param result результат авторизации
///
/// \param userAuthorizationType тип авторизующихся пользователей
///
- (void)sendOtherAuthWithServiceName:(NSString * _Nonnull)serviceName result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType;
/// Передать метрики использования сервисов авторизации, отличных от Сбер ID
/// \param service сервис, который использовал пользователь
///
/// \param result результат авторизации
///
/// \param userAuthorizationType тип авторизующихся пользователей
///
- (void)sendOtherAuthWithService:(enum SIDAuthServiceType)service result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType;
/// Удаление appToken из памяти
- (void)deleteAppToken;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SIDLoginButtonStyle : NSInteger;
@protocol SIDLoginButtonObserverProtocol;
enum SIDLoginButtonTextType : NSInteger;
@class NSCoder;
@class UIEvent;

/// Кнопка “Войти по Сбер ID”
SWIFT_CLASS("_TtC9SberIdSDK14SIDLoginButton")
@interface SIDLoginButton : UIButton
/// Скрывает/отображает лоадер
@property (nonatomic) BOOL isLoaderHidden;
/// Инициализатор
/// \param type стиль кнопки
///
/// \param observer наблюдатель состояния кнопки, по умолчанию - nil
///
- (nonnull instancetype)initWithType:(enum SIDLoginButtonStyle)type observer:(id <SIDLoginButtonObserverProtocol> _Nullable)observer;
/// Инициализатор
/// \param type стиль кнопки
///
/// \param textType вариант текста
///
/// \param desiredSize желаемые высота и ширина
///
/// \param observer наблюдатель состояния кнопки
///
- (nonnull instancetype)initWithType:(enum SIDLoginButtonStyle)type textType:(enum SIDLoginButtonTextType)textType desiredSize:(CGSize)desiredSize observer:(id <SIDLoginButtonObserverProtocol> _Nullable)observer;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Устанавливает стиль обводки
/// \param color цвет
///
- (void)setBorderColor:(UIColor * _Nonnull)color;
/// Устанавливает степень скругления углов кнопки
/// \param radiusStyle степень скругления
///
- (void)setCornerRadius:(enum SIDCornerRadiusStyle)radiusStyle;
/// Персонализирует кнопку при наличии данных
///
/// returns:
/// true, если кнопка была персонализированна
- (BOOL)attemptToPersonalize;
- (void)sendAction:(SEL _Nonnull)action to:(id _Nullable)target forEvent:(UIEvent * _Nullable)event;
@end


/// Наблюдатель состояния кнопки входа
SWIFT_PROTOCOL("_TtP9SberIdSDK30SIDLoginButtonObserverProtocol_")
@protocol SIDLoginButtonObserverProtocol
/// Кнопка входа была скрыта
- (void)loginButtonWasHidden;
@end

/// Стиль кнопки
typedef SWIFT_ENUM(NSInteger, SIDLoginButtonStyle, open) {
/// Зеленая кнопка с белыми логотипом и текстом
  SIDLoginButtonStyleGreen = 0,
/// Белая кнопка с зелеными логотипом и текстом
  SIDLoginButtonStyleWhite = 1,
};

/// Тип текста для кнопки
typedef SWIFT_ENUM(NSInteger, SIDLoginButtonTextType, open) {
/// “Сбер ID”
  SIDLoginButtonTextTypeShort = 0,
/// “Войти по Сбер ID”
  SIDLoginButtonTextTypeGeneral = 1,
/// “Заполнить со Сбер ID”
  SIDLoginButtonTextTypeFilling = 2,
/// “Продолжить со Сбер ID”
  SIDLoginButtonTextTypePursue = 3,
};


/// Менеджер авторизации
SWIFT_CLASS("_TtC9SberIdSDK10SIDManager") SWIFT_DEPRECATED_MSG("", "_TtC9SberIdSDK3SID")
@interface SIDManager : NSObject
/// Инициализация сервиса SberID
/// \param clientId ID клиента
///
/// \param standType тип стенда (для тестирования)
///
/// \param appName Название приложение для отображения пользователю
///
/// \param partnerProfileUrl url для дополнительного запроса данных
///
/// \param themeColorLight цвет для окрашивания элементов загрузки и виджетов в светлой теме личного кабинета
///
/// \param themeColorDark цвет для окрашивания элементов загрузки и виджетов в темной теме личного кабинета
///
+ (void)initSberIDWithClientId:(NSString * _Nonnull)clientId standType:(enum SIDStandType)standType appName:(NSString * _Nonnull)appName partnerProfileUrl:(NSString * _Nullable)partnerProfileUrl themeColorLight:(UIColor * _Nullable)themeColorLight themeColorDark:(UIColor * _Nullable)themeColorDark SWIFT_METHOD_FAMILY(none);
/// Инициализация сервиса SberID
/// \param clientId ID клиента
///
/// \param standType тип стенда (для тестирования)
///
/// \param profileUrl url для дополнительного запроса данных
///
/// \param uiPreferences Настройки пользовательского интерфейса
///
+ (void)initSberIDWithClientId:(NSString * _Nonnull)clientId standType:(enum SIDStandType)standType profileUrl:(NSString * _Nullable)profileUrl uiPreferences:(SIDUIPreferences * _Nullable)uiPreferences SWIFT_METHOD_FAMILY(none);
/// Приоритетная авторизоваться с помощью Сбербанк Онлайн
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: модель запроса
///   </li>
///   <li>
///     viewController: viewController для открытия SVC для авторизации через Web при отсутсвии приложения СБОЛ
///   </li>
/// </ul>
+ (void)authWithSberId:(SIDAuthRequest * _Nonnull)request viewController:(UIViewController * _Nonnull)viewController;
/// Авторизация напрямую (без UI) через  Сбербанк Онлайн
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: модель запроса
///   </li>
///   <li>
///     completion: Обработчик результата открытия СБОЛа
///   </li>
/// </ul>
+ (void)autoAuthWithRequest:(SIDAuthRequest * _Nonnull)request completion:(void (^ _Nonnull)(BOOL))completion;
/// Приоритетная авторизации пользователя по Сбер ID, используя единое веб окно авторизации.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sberIdRequest: модель запроса
///   </li>
///   <li>
///     svcRedirectUrlString: URL для возврата из СБОЛа в МП партнера на откртый SVC
///     со страницей единого портала авторизации
///   </li>
///   <li>
///     viewController: viewController необходимый для открытия SafariViewController
///   </li>
/// </ul>
///
/// returns:
/// статус успеха запуска авторизации
+ (BOOL)soleLoginWebPageAuthWithSberIdRequest:(SIDAuthRequest * _Nonnull)request svcRedirectUrlString:(NSString * _Nonnull)svcRedirectUrlString viewController:(UIViewController * _Nonnull)viewController;
/// Устанавливает id пользователя для дозагрузки личного кабинета
+ (void)setUserID:(NSString * _Nonnull)userID;
/// Устанавливливает ID клиента. Оно будет использоваться во всех методах авторизации и создания кнопки
/// \param clientId ID клиента
///
+ (void)setClientID:(NSString * _Nonnull)clientId;
/// Получить объект ответа
/// \param url url с которого был переход
///
/// \param completion блок, возвращающий объект ответа
///
+ (void)getResponseFrom:(NSURL * _Nonnull)url completion:(SWIFT_NOESCAPE void (^ _Nonnull)(SIDAuthResponse * _Nonnull))completion;
/// Передать метрики использования сервисов авторизации, отличных от Сбер ID
/// \param serviceName название сервиса, который использовал пользователь
///
/// \param result результат авторизации
///
/// \param userAuthorizationType тип авторизующихся пользователей
///
+ (void)sendOtherAuthWithServiceName:(NSString * _Nonnull)serviceName result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType;
/// Передать метрики использования сервисов авторизации, отличных от Сбер ID
/// \param service сервис, который использовал пользователь
///
/// \param result результат авторизации
///
/// \param userAuthorizationType тип авторизующихся пользователей
///
+ (void)sendOtherAuthWithService:(enum SIDAuthServiceType)service result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@protocol SIDTableViewHeightDelegate;

/// Менеджер основного представления личного кабинета пользователя,
/// содержит <code>TableView</code> для отображения ячеек.
SWIFT_CLASS("_TtC9SberIdSDK25SIDPersonalCabinetManager")
@interface SIDPersonalCabinetManager : NSObject
/// Таблица для отображения ячеек в личном кабинете.
@property (nonatomic, readonly, strong) UIView * _Nonnull tableView;
/// Инициализатор представления.
/// \param heightDelegate Обработчик изменения размеров tableView
///
/// \param analyticEventHandler Обработчик аналитических событий
///
- (nonnull instancetype)initWithHeightDelegate:(id <SIDTableViewHeightDelegate> _Nonnull)heightDelegate analyticEventHandler:(id <SIDAnalyticEventHandler> _Nullable)analyticEventHandler OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface SIDPersonalCabinetManager (SWIFT_EXTENSION(SberIdSDK)) <UITableViewDataSource>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// Обертка для представления опционального булевого значения в obj-C
typedef SWIFT_ENUM(NSInteger, SIDResult, open) {
/// Позитивный
  SIDResultSuccess = 0,
/// Негативный
  SIDResultFail = 1,
/// Статус не указан
  SIDResultUnknown = 2,
};

@class SFSafariViewController;

/// Делегат оповещающий о состояниях SafariViewController
SWIFT_PROTOCOL("_TtP9SberIdSDK31SIDSafariViewControllerDelegate_")
@protocol SIDSafariViewControllerDelegate <SFSafariViewControllerDelegate>
/// Ссылка на SafariViewController
@property (nonatomic, strong) SFSafariViewController * _Nullable safariViewController;
@end


/// Настройки SID, позволяющие конфигурировать параметры SDK
SWIFT_CLASS("_TtC9SberIdSDK11SIDSettings")
@interface SIDSettings : NSObject
/// Применить UI настройки
/// \param preferences UI настройки
///
- (void)applyUIPreferencesWithPreferences:(SIDUIPreferences * _Nonnull)preferences;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Тип стена на котором происходит авторизация (НЕ запросы в сеть) по OidC
typedef SWIFT_ENUM(NSInteger, SIDStandType, open) {
/// Пром стенд
  SIDStandTypeProm = 0,
/// Нестабильный стенд ЕСА, на котором ведется разработка
  SIDStandTypeIft = 1,
/// Стабильный стенд ЕСА, на котором ведется стабилизация
  SIDStandTypePsi = 2,
/// Нестабильный стенд Сloud Сбер ID, на котором ведется разработка
  SIDStandTypeIftCloud = 3,
/// Стабильный стенд Сloud Сбер ID, на котором ведется стабилизация
  SIDStandTypePsiCloud = 4,
};


/// Протокол <code>SIDTableViewHeightDelegate</code> предназначен для делегирования задач по обновлению высоты <code>UITableView</code>.
/// Это необходимо в случаях, когда высота таблицы должна быть динамически изменена в ответ на изменения содержимого.
SWIFT_PROTOCOL("_TtP9SberIdSDK26SIDTableViewHeightDelegate_")
@protocol SIDTableViewHeightDelegate
/// <code>updateHeight</code> вызывается, когда нужно пересчитать и обновить высоту таблицы.
/// Это может быть вызвано после изменения данных, добавления или удаления ячеек.
- (void)updateHeight;
@end


/// Тексты, используемые в интерфейсе Сбер ID.
SWIFT_CLASS("_TtC9SberIdSDK8SIDTexts")
@interface SIDTexts : NSObject
/// Инициализатор, позволяющий задать тексты для сообщений об ошибках.
- (nonnull instancetype)initWithTitleError:(NSString * _Nullable)titleError descriptionError:(NSString * _Nullable)descriptionError buttonError:(NSString * _Nullable)buttonError OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9SberIdSDK16SIDUIPreferences")
@interface SIDUIPreferences : NSObject
/// Шрифты, используемые в интерфейсе.
@property (nonatomic, strong) SIDFonts * _Nonnull fonts;
/// Тексты, используемые в интерфейсе.
@property (nonatomic, strong) SIDTexts * _Nonnull texts;
/// Основной цвет темы интерфейса.
@property (nonatomic, strong) SIDColor * _Nonnull themeColor;
/// Основной цвет элементов интерфейса.
@property (nonatomic, strong) SIDColor * _Nonnull primaryColor;
/// Вторичный цвет элементов интерфейса.
@property (nonatomic, strong) SIDColor * _Nonnull secondaryColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Тип авторизующихся пользователей
typedef SWIFT_ENUM(NSInteger, SIDUserAuthorizationType, open) {
/// Существующий позьзователь
  SIDUserAuthorizationTypeExistingUser = 0,
/// Новый пользователь
  SIDUserAuthorizationTypeNewUser = 1,
/// Неизвестно
  SIDUserAuthorizationTypeUnknown = 2,
};


/// Вспомогательные утилиты
SWIFT_CLASS("_TtC9SberIdSDK8SIDUtils")
@interface SIDUtils : NSObject
- (SIDAuthResponse * _Nullable)getResponseFrom:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Создает и возвращает случайно сгенерированную строку
///
/// returns:
/// случайное сгенерированная строка
+ (NSString * _Nonnull)createVerifier SWIFT_WARN_UNUSED_RESULT;
/// Создает и возвращает хэшированную строку из переданной секретной строки
/// \param verifier секретная случайно сгенерированная строка
///
///
/// returns:
/// хэшированная строка
+ (NSString * _Nonnull)createChallenge:(NSString * _Nonnull)verifier SWIFT_WARN_UNUSED_RESULT;
/// Получить базовую URL-строку из исходного URL при переходе в МП партнера в сценарии бесшовной авторизаии.
/// Полученное значение необходимо передать при создании SIDAuthRequest в параметр ssoBaseUrl.
/// \param from исходный URL, по которому был осуществленпри переходе в МП партнера при бесшовной авторизации.
///
///
/// returns:
/// URL-строка
+ (NSString * _Nullable)getSSOUrlStringFrom:(NSURL * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end













































































#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef SBERIDSDK_SWIFT_H
#define SBERIDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import ObjectiveC;
@import SafariServices;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SberIdSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, AuthServiceType, open) {
  AuthServiceTypeYandex = 0,
  AuthServiceTypeGoogle = 1,
  AuthServiceTypeApple = 2,
  AuthServiceTypeFacebook = 3,
  AuthServiceTypeVk = 4,
  AuthServiceTypeOk = 5,
  AuthServiceTypeAvito = 6,
  AuthServiceTypeInstagram = 7,
  AuthServiceTypeGosUslugi = 8,
  AuthServiceTypeMailRu = 9,
  AuthServiceTypeMyMoscow = 10,
  AuthServiceTypeLocal = 11,
};








typedef SWIFT_ENUM(NSInteger, CornerRadiusStyle, open) {
  CornerRadiusStyleNo = 0,
  CornerRadiusStyleNormal = 1,
  CornerRadiusStyleMax = 2,
};



SWIFT_PROTOCOL("_TtP9SberIdSDK27LoginButtonObserverProtocol_") SWIFT_AVAILABILITY(ios,unavailable,message="'LoginButtonObserverProtocol' has been renamed to '_TtP9SberIdSDK30SIDLoginButtonObserverProtocol_'")
@protocol LoginButtonObserverProtocol
@end

typedef SWIFT_ENUM(NSInteger, LoginButtonStyle, open) {
  LoginButtonStyleGreen = 0,
  LoginButtonStyleWhite = 1,
};

typedef SWIFT_ENUM(NSInteger, LoginButtonTextType, open) {
  LoginButtonTextTypeShort = 0,
  LoginButtonTextTypeGeneral = 1,
  LoginButtonTextTypeFilling = 2,
  LoginButtonTextTypePursue = 3,
};




@class SIDInitializer;
@class SIDSettings;
@class SIDLogin;

/// Фасад Сбер ID SDK
SWIFT_CLASS("_TtC9SberIdSDK3SID")
@interface SID : NSObject
/// Инициализатор Сбер ID SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SIDInitializer * _Nonnull initializer;)
+ (SIDInitializer * _Nonnull)initializer SWIFT_WARN_UNUSED_RESULT;
/// Настройки SID, позволяющие конфигурировать параметры SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SIDSettings * _Nonnull settings;)
+ (SIDSettings * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Логика входа в систему
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SIDLogin * _Nonnull login;)
+ (SIDLogin * _Nonnull)login SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
enum SIDStandType : NSInteger;
@class UIColor;
@class SIDUIPreferences;
@class SIDAuthRequest;
@class UIViewController;
@class NSURL;
@class SIDAuthResponse;
enum SIDResult : NSInteger;
enum SIDUserAuthorizationType : NSInteger;
enum SIDAuthServiceType : NSInteger;

@interface SID (SWIFT_EXTENSION(SberIdSDK))
+ (void)initSberIDWithClientId:(NSString * _Nonnull)clientId standType:(enum SIDStandType)standType appName:(NSString * _Nonnull)appName partnerProfileUrl:(NSString * _Nullable)partnerProfileUrl themeColorLight:(UIColor * _Nullable)themeColorLight themeColorDark:(UIColor * _Nullable)themeColorDark SWIFT_METHOD_FAMILY(none) SWIFT_DEPRECATED_MSG("\n\t\nДля инициализации используйте единожды - SID.initializer.initialize()\n\tДля установки основных настроек - SID.settings.applyMainPreferences(...)\n\tДля установки настроек UI - SID.settings.applyUIPreferences(...)\n\t");
+ (void)initSberIDWithClientId:(NSString * _Nonnull)clientId standType:(enum SIDStandType)standType profileUrl:(NSString * _Nullable)profileUrl uiPreferences:(SIDUIPreferences * _Nullable)uiPreferences SWIFT_METHOD_FAMILY(none) SWIFT_DEPRECATED_MSG("\n\t\nДля инициализации используйте единожды - SID.initializer.initialize()\n\tДля установки основных настроек - SID.settings.applyMainPreferences(...)\n\tДля установки настроек UI - SID.settings.applyUIPreferences(...)\n\t");
+ (void)authWithSberId:(SIDAuthRequest * _Nonnull)request viewController:(UIViewController * _Nonnull)viewController SWIFT_DEPRECATED_MSG("\n\t\nДля авторизации используйте метод SID.login.auth(...)\n\t", "SID.login.auth");
+ (void)autoAuthWithRequest:(SIDAuthRequest * _Nonnull)request completion:(void (^ _Nonnull)(BOOL))completion SWIFT_DEPRECATED_MSG("\n\t\nДля авторизации используйте метод SID.login.autoAuth(...)\n\t", "SID.login.autoAuth");
+ (BOOL)soleLoginWebPageAuthWithSberIdRequest:(SIDAuthRequest * _Nonnull)request svcRedirectUrlString:(NSString * _Nonnull)svcRedirectUrlString viewController:(UIViewController * _Nonnull)viewController SWIFT_DEPRECATED_MSG("\n\t\nДля авторизации используйте метод SID.login.webAuth(...)\n\t", "SID.login.webAuth");
+ (void)setUserID:(NSString * _Nonnull)userID SWIFT_DEPRECATED_MSG("\n\t\nДля установки UserID используйте метод SID.settings.applyMainPreferences(userID:)\n\t", "SID.settings.applyMainPreferences");
+ (void)setClientID:(NSString * _Nonnull)clientId SWIFT_DEPRECATED_MSG("\n\t\nДля установки ClientID используйте метод SID.settings.applyMainPreferences(clientID:)\n\t", "SID.settings.applyMainPreferences");
+ (void)getResponseFrom:(NSURL * _Nonnull)url completion:(SWIFT_NOESCAPE void (^ _Nonnull)(SIDAuthResponse * _Nonnull))completion SWIFT_DEPRECATED_MSG("\n\t\nДля получения модели ответа используйте метод SID.login.getResponseFrom(...)\n\t", "SID.login.getResponseFrom");
+ (void)deleteAppToken SWIFT_DEPRECATED_MSG("\n\t\nДля удаления токена используйте метод SID.login.deleteAppToken()\n\t", "SID.login.deleteAppToken");
+ (void)sendOtherAuthWithServiceName:(NSString * _Nonnull)serviceName result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType SWIFT_DEPRECATED_MSG("\n\t\nДля отправки метрики используйте метод SID.login.sendOtherAuth(...)\n\t", "SID.login.sendOtherAuth");
+ (void)sendOtherAuthWithService:(enum SIDAuthServiceType)service result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType SWIFT_DEPRECATED_MSG("\n\t\nДля отправки метрики используйте метод SID.login.sendOtherAuth(...)\n\t", "SID.login.sendOtherAuth");
@end


/// Протокол <code>SIDAnalyticEventHandler</code> предназначен для обработки событий аналитики,
/// таких как открытие ссылок или другие важные действия пользователей, которые следует отслеживать.
SWIFT_PROTOCOL("_TtP9SberIdSDK23SIDAnalyticEventHandler_")
@protocol SIDAnalyticEventHandler
/// Обрабатывает событие открытия ссылки.
/// \param url URL-адрес, который был открыт.
/// Этот метод вызывается, когда пользователь переходит по ссылке.
///
- (void)handleOpeningEventWithUrl:(NSString * _Nonnull)url;
@end


/// Модель запроса
SWIFT_CLASS("_TtC9SberIdSDK18SIDAppTokenRequest")
@interface SIDAppTokenRequest : NSObject
/// Наименование групп данных, на которые подписана система
@property (nonatomic, copy) NSString * _Nonnull scope;
/// Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
@property (nonatomic, copy) NSString * _Nonnull state;
/// Значение, сгенерированное внешней АС для предотвращения атак повторения
@property (nonatomic, copy) NSString * _Nonnull nonce;
/// Адрес на который будет перенаправлен клиент после успешной аутентификации (deeplink)
@property (nonatomic, copy) NSString * _Nonnull redirectUri;
/// Хэшированное значение секретного кода
@property (nonatomic, copy) NSString * _Nullable codeChallenge;
/// Метод преобразования секретного кода
@property (nonatomic, copy) NSString * _Nullable codeChallengeMethod;
/// Инициализатор
/// \param scope Наименование групп данных, на которые подписана система
///
/// \param state Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
///
/// \param nonce Значение, сгенерированное внешней АС для предотвращения атак повторения
///
/// \param redirectUri Url на который будет перенаправлен клиент после успешной аутентификации (deeplink)
///
/// \param codeChallenge Хэшированное значение секретного кода
///
/// \param codeChallengeMethod Метод преобразования секретного кода
///
- (nonnull instancetype)initWithScope:(NSString * _Nonnull)scope state:(NSString * _Nonnull)state nonce:(NSString * _Nonnull)nonce redirectUri:(NSString * _Nonnull)redirectUri codeChallenge:(NSString * _Nullable)codeChallenge codeChallengeMethod:(NSString * _Nullable)codeChallengeMethod OBJC_DESIGNATED_INITIALIZER;
/// Инициализатор. Инициирует
/// clientId, scope, state, nonce, redirectUri, codeChallenge, codeChallengeMethod - пустыми строками
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Объект ответа AppToken
SWIFT_CLASS("_TtC9SberIdSDK19SIDAppTokenResponse")
@interface SIDAppTokenResponse : NSObject
/// Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Код авторизации клиента
@property (nonatomic, readonly, copy) NSString * _Nullable authCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9SberIdSDK14SIDAuthManager") SWIFT_AVAILABILITY(ios,deprecated=0.0.1,message="'SIDAuthManager' has been renamed to '_TtC9SberIdSDK3SID'")
@interface SIDAuthManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Модель запроса
SWIFT_CLASS("_TtC9SberIdSDK14SIDAuthRequest")
@interface SIDAuthRequest : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull challengeMethod;)
+ (NSString * _Nonnull)challengeMethod SWIFT_WARN_UNUSED_RESULT;
/// Наименование групп данных, на которые подписана система
@property (nonatomic, copy) NSString * _Nonnull scope;
/// Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
@property (nonatomic, copy) NSString * _Nonnull state;
/// Значение, сгенерированное внешней АС для предотвращения атак повторения
@property (nonatomic, copy) NSString * _Nonnull nonce;
/// Адрес на который будет перенаправлен клиент после успешной аутентификации (deeplink)
@property (nonatomic, copy) NSString * _Nonnull redirectUri;
/// URI, который будет использован для запуска авторизации взамен дефолтного
@property (nonatomic, copy) NSString * _Nullable ssoBaseUrl;
/// Хэшированное значение секретного кода
@property (nonatomic, copy) NSString * _Nullable codeChallenge;
/// Метод преобразования секретного кода
@property (nonatomic, copy) NSString * _Nullable codeChallengeMethod;
/// Номер телефона пользователя “79ХХХХХХХХХ”
@property (nonatomic, copy) NSString * _Nullable loginHint;
/// Инициализатор
/// \param scope Наименование групп данных, на которые подписана система
///
/// \param state Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
///
/// \param nonce Значение, сгенерированное внешней АС для предотвращения атак повторения
///
/// \param ssoBaseUrl Url для отправки запроса, если nil - будет исопльзовано значение по умолчанию
///
/// \param redirectUri Url на который будет перенаправлен клиент после успешной аутентификации (deeplink)
///
/// \param codeChallenge Хэшированное значение секретного кода
///
/// \param codeChallengeMethod Метод преобразования секретного кода
///
/// \param standType Тип стэнда к которому будет выполняться подключение
///
/// \param loginHint Номер телефона пользователя “79ХХХХХХХХХ”
///
- (nonnull instancetype)initWithScope:(NSString * _Nonnull)scope state:(NSString * _Nonnull)state nonce:(NSString * _Nonnull)nonce redirectUri:(NSString * _Nonnull)redirectUri ssoBaseUrl:(NSString * _Nullable)ssoBaseUrl codeChallenge:(NSString * _Nullable)codeChallenge codeChallengeMethod:(NSString * _Nullable)codeChallengeMethod loginHint:(NSString * _Nullable)loginHint OBJC_DESIGNATED_INITIALIZER;
/// Инициализатор. Инициирует
/// scope, state, nonce, redirectUri, codeChallenge, codeChallengeMethod - пустыми строками
/// ssoBaseUrl - nil
/// standType - .prom
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Объект ответа авторизации
SWIFT_CLASS("_TtC9SberIdSDK15SIDAuthResponse")
@interface SIDAuthResponse : NSObject
/// Статус операции
@property (nonatomic, readonly) BOOL isSuccess;
/// Значение, сгенерированное внешней АС для предотвращения атак повторения
@property (nonatomic, readonly, copy) NSString * _Nonnull nonce;
/// Значение для предотвращения подделки межсайтовых запросов, случайно сгенерированное
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// Код авторизации клиента
@property (nonatomic, readonly, copy) NSString * _Nullable authCode;
/// AppToken для бесшовной авторизации
@property (nonatomic, readonly, copy) NSString * _Nullable appToken;
/// Текст ошибки
@property (nonatomic, readonly, copy) NSString * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Перечисление сервисов авторизации, отличные от Сбер ID
typedef SWIFT_ENUM(NSInteger, SIDAuthServiceType, open) {
/// Яндекс
  SIDAuthServiceTypeYandex = 0,
/// Google
  SIDAuthServiceTypeGoogle = 1,
/// Apple
  SIDAuthServiceTypeApple = 2,
/// Facebook
  SIDAuthServiceTypeFacebook = 3,
/// ВКонтакте
  SIDAuthServiceTypeVk = 4,
/// Одноклассники
  SIDAuthServiceTypeOk = 5,
/// Авито
  SIDAuthServiceTypeAvito = 6,
/// Инстаграм
  SIDAuthServiceTypeInstagram = 7,
/// ГосУлуги
  SIDAuthServiceTypeGosUslugi = 8,
/// Mail.ru
  SIDAuthServiceTypeMailRu = 9,
/// Моя Москва
  SIDAuthServiceTypeMyMoscow = 10,
/// Локальная учетная запись
  SIDAuthServiceTypeLocal = 11,
};


/// Цвета интерфейса Сбер ID
SWIFT_CLASS("_TtC9SberIdSDK8SIDColor")
@interface SIDColor : NSObject
/// Цвет для светлой темы.
@property (nonatomic, strong) UIColor * _Nonnull light;
/// Цвет для темной темы.
@property (nonatomic, strong) UIColor * _Nonnull dark;
/// Инициализирует объект с указанными цветами для светлой и темной темы.
- (nonnull instancetype)initWithLight:(UIColor * _Nonnull)light dark:(UIColor * _Nonnull)dark OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Стиль скругления углов кнопки
typedef SWIFT_ENUM(NSInteger, SIDCornerRadiusStyle, open) {
/// Отсутствует
  SIDCornerRadiusStyleNo = 0,
/// Радиус = 4
  SIDCornerRadiusStyleNormal = 1,
/// Радиус = высота кнопки / 2
  SIDCornerRadiusStyleMax = 2,
};

@class UIFont;

/// Шрифты, используемые в интерфейсе Сбер ID.
SWIFT_CLASS("_TtC9SberIdSDK8SIDFonts")
@interface SIDFonts : NSObject
/// Инициализатор, позволяющий задать шрифты для интерфейса.
- (nonnull instancetype)initWithSemiboldFont:(UIFont * _Nullable)semiboldFont mediumFont:(UIFont * _Nullable)mediumFont OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Инициализатор Сбер ID SDK
SWIFT_CLASS("_TtC9SberIdSDK14SIDInitializer")
@interface SIDInitializer : NSObject
/// Инициализация Сбер ID SDK
- (void)initialize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Логика входа в систему
SWIFT_CLASS("_TtC9SberIdSDK8SIDLogin")
@interface SIDLogin : NSObject
/// Приоритетная авторизоваться с помощью Сбербанк Онлайн
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: модель запроса
///   </li>
///   <li>
///     viewController: viewController для открытия SVC для авторизации через Web при отсутсвии приложения СБОЛ
///   </li>
/// </ul>
- (void)authWithSberId:(SIDAuthRequest * _Nonnull)request viewController:(UIViewController * _Nonnull)viewController;
/// Авторизация напрямую (без UI) через  Сбербанк Онлайн
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: модель запроса
///   </li>
///   <li>
///     completion: Обработчик результата открытия СБОЛа
///   </li>
/// </ul>
- (void)autoAuthWithRequest:(SIDAuthRequest * _Nonnull)request completion:(void (^ _Nonnull)(BOOL))completion;
/// Приоритетная авторизации пользователя по Сбер ID, используя единое веб окно авторизации.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sberIdRequest: модель запроса
///   </li>
///   <li>
///     svcRedirectUrlString: URL для возврата из СБОЛа в МП партнера на откртый SVC
///     со страницей единого портала авторизации
///   </li>
///   <li>
///     viewController: viewController необходимый для открытия SafariViewController
///   </li>
/// </ul>
///
/// returns:
/// статус успеха запуска авторизации
- (BOOL)webAuthWithSberIdRequest:(SIDAuthRequest * _Nonnull)request svcRedirectUrlString:(NSString * _Nonnull)svcRedirectUrlString viewController:(UIViewController * _Nonnull)viewController;
/// Получить объект ответа
/// \param url url с которого был переход
///
/// \param completion блок, возвращающий объект ответа
///
- (void)getResponseFrom:(NSURL * _Nonnull)url completion:(SWIFT_NOESCAPE void (^ _Nonnull)(SIDAuthResponse * _Nonnull))completion;
/// Передать метрики использования сервисов авторизации, отличных от Сбер ID
/// \param serviceName название сервиса, который использовал пользователь
///
/// \param result результат авторизации
///
/// \param userAuthorizationType тип авторизующихся пользователей
///
- (void)sendOtherAuthWithServiceName:(NSString * _Nonnull)serviceName result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType;
/// Передать метрики использования сервисов авторизации, отличных от Сбер ID
/// \param service сервис, который использовал пользователь
///
/// \param result результат авторизации
///
/// \param userAuthorizationType тип авторизующихся пользователей
///
- (void)sendOtherAuthWithService:(enum SIDAuthServiceType)service result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType;
/// Удаление appToken из памяти
- (void)deleteAppToken;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SIDLoginButtonStyle : NSInteger;
@protocol SIDLoginButtonObserverProtocol;
enum SIDLoginButtonTextType : NSInteger;
@class NSCoder;
@class UIEvent;

/// Кнопка “Войти по Сбер ID”
SWIFT_CLASS("_TtC9SberIdSDK14SIDLoginButton")
@interface SIDLoginButton : UIButton
/// Скрывает/отображает лоадер
@property (nonatomic) BOOL isLoaderHidden;
/// Инициализатор
/// \param type стиль кнопки
///
/// \param observer наблюдатель состояния кнопки, по умолчанию - nil
///
- (nonnull instancetype)initWithType:(enum SIDLoginButtonStyle)type observer:(id <SIDLoginButtonObserverProtocol> _Nullable)observer;
/// Инициализатор
/// \param type стиль кнопки
///
/// \param textType вариант текста
///
/// \param desiredSize желаемые высота и ширина
///
/// \param observer наблюдатель состояния кнопки
///
- (nonnull instancetype)initWithType:(enum SIDLoginButtonStyle)type textType:(enum SIDLoginButtonTextType)textType desiredSize:(CGSize)desiredSize observer:(id <SIDLoginButtonObserverProtocol> _Nullable)observer;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Устанавливает стиль обводки
/// \param color цвет
///
- (void)setBorderColor:(UIColor * _Nonnull)color;
/// Устанавливает степень скругления углов кнопки
/// \param radiusStyle степень скругления
///
- (void)setCornerRadius:(enum SIDCornerRadiusStyle)radiusStyle;
/// Персонализирует кнопку при наличии данных
///
/// returns:
/// true, если кнопка была персонализированна
- (BOOL)attemptToPersonalize;
- (void)sendAction:(SEL _Nonnull)action to:(id _Nullable)target forEvent:(UIEvent * _Nullable)event;
@end


/// Наблюдатель состояния кнопки входа
SWIFT_PROTOCOL("_TtP9SberIdSDK30SIDLoginButtonObserverProtocol_")
@protocol SIDLoginButtonObserverProtocol
/// Кнопка входа была скрыта
- (void)loginButtonWasHidden;
@end

/// Стиль кнопки
typedef SWIFT_ENUM(NSInteger, SIDLoginButtonStyle, open) {
/// Зеленая кнопка с белыми логотипом и текстом
  SIDLoginButtonStyleGreen = 0,
/// Белая кнопка с зелеными логотипом и текстом
  SIDLoginButtonStyleWhite = 1,
};

/// Тип текста для кнопки
typedef SWIFT_ENUM(NSInteger, SIDLoginButtonTextType, open) {
/// “Сбер ID”
  SIDLoginButtonTextTypeShort = 0,
/// “Войти по Сбер ID”
  SIDLoginButtonTextTypeGeneral = 1,
/// “Заполнить со Сбер ID”
  SIDLoginButtonTextTypeFilling = 2,
/// “Продолжить со Сбер ID”
  SIDLoginButtonTextTypePursue = 3,
};


/// Менеджер авторизации
SWIFT_CLASS("_TtC9SberIdSDK10SIDManager") SWIFT_DEPRECATED_MSG("", "_TtC9SberIdSDK3SID")
@interface SIDManager : NSObject
/// Инициализация сервиса SberID
/// \param clientId ID клиента
///
/// \param standType тип стенда (для тестирования)
///
/// \param appName Название приложение для отображения пользователю
///
/// \param partnerProfileUrl url для дополнительного запроса данных
///
/// \param themeColorLight цвет для окрашивания элементов загрузки и виджетов в светлой теме личного кабинета
///
/// \param themeColorDark цвет для окрашивания элементов загрузки и виджетов в темной теме личного кабинета
///
+ (void)initSberIDWithClientId:(NSString * _Nonnull)clientId standType:(enum SIDStandType)standType appName:(NSString * _Nonnull)appName partnerProfileUrl:(NSString * _Nullable)partnerProfileUrl themeColorLight:(UIColor * _Nullable)themeColorLight themeColorDark:(UIColor * _Nullable)themeColorDark SWIFT_METHOD_FAMILY(none);
/// Инициализация сервиса SberID
/// \param clientId ID клиента
///
/// \param standType тип стенда (для тестирования)
///
/// \param profileUrl url для дополнительного запроса данных
///
/// \param uiPreferences Настройки пользовательского интерфейса
///
+ (void)initSberIDWithClientId:(NSString * _Nonnull)clientId standType:(enum SIDStandType)standType profileUrl:(NSString * _Nullable)profileUrl uiPreferences:(SIDUIPreferences * _Nullable)uiPreferences SWIFT_METHOD_FAMILY(none);
/// Приоритетная авторизоваться с помощью Сбербанк Онлайн
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: модель запроса
///   </li>
///   <li>
///     viewController: viewController для открытия SVC для авторизации через Web при отсутсвии приложения СБОЛ
///   </li>
/// </ul>
+ (void)authWithSberId:(SIDAuthRequest * _Nonnull)request viewController:(UIViewController * _Nonnull)viewController;
/// Авторизация напрямую (без UI) через  Сбербанк Онлайн
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     request: модель запроса
///   </li>
///   <li>
///     completion: Обработчик результата открытия СБОЛа
///   </li>
/// </ul>
+ (void)autoAuthWithRequest:(SIDAuthRequest * _Nonnull)request completion:(void (^ _Nonnull)(BOOL))completion;
/// Приоритетная авторизации пользователя по Сбер ID, используя единое веб окно авторизации.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sberIdRequest: модель запроса
///   </li>
///   <li>
///     svcRedirectUrlString: URL для возврата из СБОЛа в МП партнера на откртый SVC
///     со страницей единого портала авторизации
///   </li>
///   <li>
///     viewController: viewController необходимый для открытия SafariViewController
///   </li>
/// </ul>
///
/// returns:
/// статус успеха запуска авторизации
+ (BOOL)soleLoginWebPageAuthWithSberIdRequest:(SIDAuthRequest * _Nonnull)request svcRedirectUrlString:(NSString * _Nonnull)svcRedirectUrlString viewController:(UIViewController * _Nonnull)viewController;
/// Устанавливает id пользователя для дозагрузки личного кабинета
+ (void)setUserID:(NSString * _Nonnull)userID;
/// Устанавливливает ID клиента. Оно будет использоваться во всех методах авторизации и создания кнопки
/// \param clientId ID клиента
///
+ (void)setClientID:(NSString * _Nonnull)clientId;
/// Получить объект ответа
/// \param url url с которого был переход
///
/// \param completion блок, возвращающий объект ответа
///
+ (void)getResponseFrom:(NSURL * _Nonnull)url completion:(SWIFT_NOESCAPE void (^ _Nonnull)(SIDAuthResponse * _Nonnull))completion;
/// Передать метрики использования сервисов авторизации, отличных от Сбер ID
/// \param serviceName название сервиса, который использовал пользователь
///
/// \param result результат авторизации
///
/// \param userAuthorizationType тип авторизующихся пользователей
///
+ (void)sendOtherAuthWithServiceName:(NSString * _Nonnull)serviceName result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType;
/// Передать метрики использования сервисов авторизации, отличных от Сбер ID
/// \param service сервис, который использовал пользователь
///
/// \param result результат авторизации
///
/// \param userAuthorizationType тип авторизующихся пользователей
///
+ (void)sendOtherAuthWithService:(enum SIDAuthServiceType)service result:(enum SIDResult)result userAuthorizationType:(enum SIDUserAuthorizationType)userAuthorizationType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@protocol SIDTableViewHeightDelegate;

/// Менеджер основного представления личного кабинета пользователя,
/// содержит <code>TableView</code> для отображения ячеек.
SWIFT_CLASS("_TtC9SberIdSDK25SIDPersonalCabinetManager")
@interface SIDPersonalCabinetManager : NSObject
/// Таблица для отображения ячеек в личном кабинете.
@property (nonatomic, readonly, strong) UIView * _Nonnull tableView;
/// Инициализатор представления.
/// \param heightDelegate Обработчик изменения размеров tableView
///
/// \param analyticEventHandler Обработчик аналитических событий
///
- (nonnull instancetype)initWithHeightDelegate:(id <SIDTableViewHeightDelegate> _Nonnull)heightDelegate analyticEventHandler:(id <SIDAnalyticEventHandler> _Nullable)analyticEventHandler OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface SIDPersonalCabinetManager (SWIFT_EXTENSION(SberIdSDK)) <UITableViewDataSource>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// Обертка для представления опционального булевого значения в obj-C
typedef SWIFT_ENUM(NSInteger, SIDResult, open) {
/// Позитивный
  SIDResultSuccess = 0,
/// Негативный
  SIDResultFail = 1,
/// Статус не указан
  SIDResultUnknown = 2,
};

@class SFSafariViewController;

/// Делегат оповещающий о состояниях SafariViewController
SWIFT_PROTOCOL("_TtP9SberIdSDK31SIDSafariViewControllerDelegate_")
@protocol SIDSafariViewControllerDelegate <SFSafariViewControllerDelegate>
/// Ссылка на SafariViewController
@property (nonatomic, strong) SFSafariViewController * _Nullable safariViewController;
@end


/// Настройки SID, позволяющие конфигурировать параметры SDK
SWIFT_CLASS("_TtC9SberIdSDK11SIDSettings")
@interface SIDSettings : NSObject
/// Применить UI настройки
/// \param preferences UI настройки
///
- (void)applyUIPreferencesWithPreferences:(SIDUIPreferences * _Nonnull)preferences;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Тип стена на котором происходит авторизация (НЕ запросы в сеть) по OidC
typedef SWIFT_ENUM(NSInteger, SIDStandType, open) {
/// Пром стенд
  SIDStandTypeProm = 0,
/// Нестабильный стенд ЕСА, на котором ведется разработка
  SIDStandTypeIft = 1,
/// Стабильный стенд ЕСА, на котором ведется стабилизация
  SIDStandTypePsi = 2,
/// Нестабильный стенд Сloud Сбер ID, на котором ведется разработка
  SIDStandTypeIftCloud = 3,
/// Стабильный стенд Сloud Сбер ID, на котором ведется стабилизация
  SIDStandTypePsiCloud = 4,
};


/// Протокол <code>SIDTableViewHeightDelegate</code> предназначен для делегирования задач по обновлению высоты <code>UITableView</code>.
/// Это необходимо в случаях, когда высота таблицы должна быть динамически изменена в ответ на изменения содержимого.
SWIFT_PROTOCOL("_TtP9SberIdSDK26SIDTableViewHeightDelegate_")
@protocol SIDTableViewHeightDelegate
/// <code>updateHeight</code> вызывается, когда нужно пересчитать и обновить высоту таблицы.
/// Это может быть вызвано после изменения данных, добавления или удаления ячеек.
- (void)updateHeight;
@end


/// Тексты, используемые в интерфейсе Сбер ID.
SWIFT_CLASS("_TtC9SberIdSDK8SIDTexts")
@interface SIDTexts : NSObject
/// Инициализатор, позволяющий задать тексты для сообщений об ошибках.
- (nonnull instancetype)initWithTitleError:(NSString * _Nullable)titleError descriptionError:(NSString * _Nullable)descriptionError buttonError:(NSString * _Nullable)buttonError OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9SberIdSDK16SIDUIPreferences")
@interface SIDUIPreferences : NSObject
/// Шрифты, используемые в интерфейсе.
@property (nonatomic, strong) SIDFonts * _Nonnull fonts;
/// Тексты, используемые в интерфейсе.
@property (nonatomic, strong) SIDTexts * _Nonnull texts;
/// Основной цвет темы интерфейса.
@property (nonatomic, strong) SIDColor * _Nonnull themeColor;
/// Основной цвет элементов интерфейса.
@property (nonatomic, strong) SIDColor * _Nonnull primaryColor;
/// Вторичный цвет элементов интерфейса.
@property (nonatomic, strong) SIDColor * _Nonnull secondaryColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Тип авторизующихся пользователей
typedef SWIFT_ENUM(NSInteger, SIDUserAuthorizationType, open) {
/// Существующий позьзователь
  SIDUserAuthorizationTypeExistingUser = 0,
/// Новый пользователь
  SIDUserAuthorizationTypeNewUser = 1,
/// Неизвестно
  SIDUserAuthorizationTypeUnknown = 2,
};


/// Вспомогательные утилиты
SWIFT_CLASS("_TtC9SberIdSDK8SIDUtils")
@interface SIDUtils : NSObject
- (SIDAuthResponse * _Nullable)getResponseFrom:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Создает и возвращает случайно сгенерированную строку
///
/// returns:
/// случайное сгенерированная строка
+ (NSString * _Nonnull)createVerifier SWIFT_WARN_UNUSED_RESULT;
/// Создает и возвращает хэшированную строку из переданной секретной строки
/// \param verifier секретная случайно сгенерированная строка
///
///
/// returns:
/// хэшированная строка
+ (NSString * _Nonnull)createChallenge:(NSString * _Nonnull)verifier SWIFT_WARN_UNUSED_RESULT;
/// Получить базовую URL-строку из исходного URL при переходе в МП партнера в сценарии бесшовной авторизаии.
/// Полученное значение необходимо передать при создании SIDAuthRequest в параметр ssoBaseUrl.
/// \param from исходный URL, по которому был осуществленпри переходе в МП партнера при бесшовной авторизации.
///
///
/// returns:
/// URL-строка
+ (NSString * _Nullable)getSSOUrlStringFrom:(NSURL * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end













































































#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
