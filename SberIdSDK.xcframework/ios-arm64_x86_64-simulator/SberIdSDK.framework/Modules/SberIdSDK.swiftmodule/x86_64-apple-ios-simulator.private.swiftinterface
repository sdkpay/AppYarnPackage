// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SberIdSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ClickstreamAnalytics
import CommonCrypto
import CoreFoundation
import DeveloperToolsSupport
import Foundation
import SafariServices
import Swift
import SwiftUI
import UIKit.UIFont
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc public protocol SIDSafariViewControllerDelegate : SafariServices.SFSafariViewControllerDelegate {
  @objc var safariViewController: SafariServices.SFSafariViewController? { get set }
}
@available(iOS, unavailable, renamed: "SIDLoginButtonStyle")
@objc public enum LoginButtonStyle : Swift.Int {
  case green
  case white
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SIDLoginButtonStyle : Swift.Int {
  case green
  case white
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class SIDAppTokenResponse : ObjectiveC.NSObject {
  @objc final public let state: Swift.String?
  @objc final public let authCode: Swift.String?
  @objc deinit
}
@objc @objcMembers final public class SIDTexts : ObjectiveC.NSObject {
  @objc public init(titleError: Swift.String? = nil, descriptionError: Swift.String? = nil, buttonError: Swift.String? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers final public class SIDFonts : ObjectiveC.NSObject {
  @objc public init(semiboldFont: UIKit.UIFont? = nil, mediumFont: UIKit.UIFont? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class SID : ObjectiveC.NSObject {
  @objc public static let initializer: SberIdSDK.SIDInitializer
  @objc public static let settings: SberIdSDK.SIDSettings
  @objc public static let login: SberIdSDK.SIDLogin
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS, deprecated, renamed: "SID")
@objc final public class SIDAuthManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(*, deprecated, renamed: "SID")
@objc final public class SIDManager : ObjectiveC.NSObject {
  @objc public static func initSberID(clientId: Swift.String, standType: SberIdSDK.SIDStandType = .prom, appName: Swift.String = "сервис партнера", partnerProfileUrl: Swift.String? = nil, themeColorLight: UIKit.UIColor? = nil, themeColorDark: UIKit.UIColor? = nil)
  @objc public static func initSberID(clientId: Swift.String, standType: SberIdSDK.SIDStandType = .prom, profileUrl: Swift.String? = nil, uiPreferences: SberIdSDK.SIDUIPreferences? = nil)
  @objc public static func auth(withSberId request: SberIdSDK.SIDAuthRequest, viewController: UIKit.UIViewController)
  @objc public static func autoAuth(request: SberIdSDK.SIDAuthRequest, completion: @escaping ((Swift.Bool) -> Swift.Void))
  @discardableResult
  @objc public static func soleLoginWebPageAuth(sberIdRequest request: SberIdSDK.SIDAuthRequest, svcRedirectUrlString: Swift.String, viewController: UIKit.UIViewController) -> Swift.Bool
  @objc public static func setUserID(_ userID: Swift.String)
  @objc public static func setClientID(_ clientId: Swift.String)
  @objc public static func getResponseFrom(_ url: Foundation.URL, completion: (SberIdSDK.SIDAuthResponse) -> Swift.Void)
  public static func checkAppTokenIsValid() -> Swift.Result<Swift.Bool, SberIdSDK.SIDError>
  public static func refreshAppToken(request: SberIdSDK.SIDAppTokenRequest, completion: @escaping (Swift.Result<SberIdSDK.SIDAppTokenResponse, SberIdSDK.SIDError>) -> Swift.Void)
  public static func deleteAppToken()
  @discardableResult
  public static func goToPartnerSSO(partnerWebLink: Swift.String, partnerClientId: Swift.String?, partnerColor: UIKit.UIColor?, openIn: SberIdSDK.SIDOpenInType?) -> SberIdSDK.SIDError?
  @objc public static func sendOtherAuth(serviceName: Swift.String, result: SberIdSDK.SIDResult, userAuthorizationType: SberIdSDK.SIDUserAuthorizationType)
  @objc public static func sendOtherAuth(service: SberIdSDK.SIDAuthServiceType, result: SberIdSDK.SIDResult, userAuthorizationType: SberIdSDK.SIDUserAuthorizationType)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol SIDAnalyticEventHandler {
  @objc func handleOpeningEvent(url: Swift.String)
}
@_hasMissingDesignatedInitializers public class SIDError : Swift.Error {
  final public let message: Swift.String?
  final public let type: SberIdSDK.SIDErrorType
  @objc deinit
}
extension SberIdSDK.SIDError : Swift.Equatable {
  public static func == (lhs: SberIdSDK.SIDError, rhs: SberIdSDK.SIDError) -> Swift.Bool
}
public enum SIDErrorType {
  case serviceError
  case serviceNotAvailable
  case requiredRelogin
  case unknown
  case linkIsNotValid
  case clientIdNotFound
  public static func == (a: SberIdSDK.SIDErrorType, b: SberIdSDK.SIDErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class SIDInitializer : ObjectiveC.NSObject {
  @objc final public func initialize()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class SIDPersonalCabinetManager : ObjectiveC.NSObject {
  @objc final public var tableView: UIKit.UIView {
    @objc get
  }
  @objc public init(heightDelegate: any SberIdSDK.SIDTableViewHeightDelegate, analyticEventHandler: (any SberIdSDK.SIDAnalyticEventHandler)? = nil)
  @objc deinit
}
extension SberIdSDK.SIDPersonalCabinetManager : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@available(iOS, unavailable, renamed: "SIDLoginButtonTextType")
@objc public enum LoginButtonTextType : Swift.Int {
  case short
  case general
  case filling
  case pursue
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SIDLoginButtonTextType : Swift.Int {
  case short
  case general
  case filling
  case pursue
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SIDUtilsProtocol {
  func getResponse(from url: Foundation.URL) -> SberIdSDK.SIDAuthResponse?
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class SIDUtils : ObjectiveC.NSObject, SberIdSDK.SIDUtilsProtocol {
  @objc final public func getResponse(from url: Foundation.URL) -> SberIdSDK.SIDAuthResponse?
  @objc public static func createVerifier() -> Swift.String
  @objc public static func createChallenge(_ verifier: Swift.String) -> Swift.String
  @objc public static func getSSOUrlStringFrom(_ url: Foundation.URL?) -> Swift.String?
  @objc deinit
}
@available(iOS, unavailable, renamed: "SIDAuthServiceType")
@objc public enum AuthServiceType : Swift.Int {
  case yandex
  case google
  case apple
  case facebook
  case vk
  case ok
  case avito
  case instagram
  case gosUslugi
  case mailRu
  case myMoscow
  case local
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SIDAuthServiceType : Swift.Int {
  case yandex
  case google
  case apple
  case facebook
  case vk
  case ok
  case avito
  case instagram
  case gosUslugi
  case mailRu
  case myMoscow
  case local
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SIDWebViewDelegateProtocol : AnyObject {
  func webViewReject()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) final public class SIDLoginButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) final public var isLoaderHidden: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) convenience public init(type: SberIdSDK.SIDLoginButtonStyle, observer: (any SberIdSDK.SIDLoginButtonObserverProtocol)? = nil)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(type: SberIdSDK.SIDLoginButtonStyle, textType: SberIdSDK.SIDLoginButtonTextType, desiredSize: CoreFoundation.CGSize, observer: (any SberIdSDK.SIDLoginButtonObserverProtocol)? = nil)
  @objc @_Concurrency.MainActor(unsafe) final public func setBorderColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) final public func setCornerRadius(_ radiusStyle: SberIdSDK.SIDCornerRadiusStyle)
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) final public func attemptToPersonalize() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override final public func sendAction(_ action: ObjectiveC.Selector, to target: Any?, for event: UIKit.UIEvent?)
  @objc deinit
}
@objc @objcMembers final public class SIDUIPreferences : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var fonts: SberIdSDK.SIDFonts
  @objc final public var texts: SberIdSDK.SIDTexts
  @objc final public var themeColor: SberIdSDK.SIDColor
  @objc final public var primaryColor: SberIdSDK.SIDColor
  @objc final public var secondaryColor: SberIdSDK.SIDColor
  final public var elkErrorType: SberIdSDK.SIDErrorTypes
  public init(texts: SberIdSDK.SIDTexts? = nil, themeColor: SberIdSDK.SIDColor? = nil, primaryColor: SberIdSDK.SIDColor? = nil, secondaryColor: SberIdSDK.SIDColor? = nil, fonts: SberIdSDK.SIDFonts? = nil, elkErrorType: SberIdSDK.SIDErrorTypes? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SberIdSDK.SID {
  @objc @available(*, deprecated, message: "\nДля инициализации используйте единожды - SID.initializer.initialize()\nДля установки основных настроек - SID.settings.applyMainPreferences(...)\nДля установки настроек UI - SID.settings.applyUIPreferences(...)")
  public static func initSberID(clientId: Swift.String, standType: SberIdSDK.SIDStandType = .prom, appName: Swift.String = "сервис партнера", partnerProfileUrl: Swift.String? = nil, themeColorLight: UIKit.UIColor? = nil, themeColorDark: UIKit.UIColor? = nil)
  @objc @available(*, deprecated, message: "\nДля инициализации используйте единожды - SID.initializer.initialize()\nДля установки основных настроек - SID.settings.applyMainPreferences(...)\nДля установки настроек UI - SID.settings.applyUIPreferences(...)")
  public static func initSberID(clientId: Swift.String, standType: SberIdSDK.SIDStandType = .prom, profileUrl: Swift.String? = nil, uiPreferences: SberIdSDK.SIDUIPreferences? = nil)
  @objc @available(*, deprecated, renamed: "SID.login.auth", message: "\nДля авторизации используйте метод SID.login.auth(...)")
  public static func auth(withSberId request: SberIdSDK.SIDAuthRequest, viewController: UIKit.UIViewController)
  @objc @available(*, deprecated, renamed: "SID.login.autoAuth", message: "\nДля авторизации используйте метод SID.login.autoAuth(...)")
  public static func autoAuth(request: SberIdSDK.SIDAuthRequest, completion: @escaping ((Swift.Bool) -> Swift.Void))
  @objc @available(*, deprecated, renamed: "SID.login.webAuth", message: "\nДля авторизации используйте метод SID.login.webAuth(...)")
  @discardableResult
  public static func soleLoginWebPageAuth(sberIdRequest request: SberIdSDK.SIDAuthRequest, svcRedirectUrlString: Swift.String, viewController: UIKit.UIViewController) -> Swift.Bool
  @objc @available(*, deprecated, renamed: "SID.settings.applyMainPreferences", message: "\nДля установки UserID используйте метод SID.settings.applyMainPreferences(userID:)")
  public static func setUserID(_ userID: Swift.String)
  @objc @available(*, deprecated, renamed: "SID.settings.applyMainPreferences", message: "\nДля установки ClientID используйте метод SID.settings.applyMainPreferences(clientID:)")
  public static func setClientID(_ clientId: Swift.String)
  @objc @available(*, deprecated, renamed: "SID.login.getResponseFrom", message: "\nДля получения модели ответа используйте метод SID.login.getResponseFrom(...)")
  public static func getResponseFrom(_ url: Foundation.URL, completion: (SberIdSDK.SIDAuthResponse) -> Swift.Void)
  @available(*, deprecated, renamed: "SID.login.checkAppTokenIsValid", message: "\nДля проверки токена используйте метод SID.login.checkAppTokenIsValid()")
  public static func checkAppTokenIsValid() -> Swift.Result<Swift.Bool, SberIdSDK.SIDError>
  @available(*, deprecated, renamed: "SID.login.refreshAppToken", message: "\nДля обновления токена используйте метод SID.login.refreshAppToken(...)")
  public static func refreshAppToken(request: SberIdSDK.SIDAppTokenRequest, completion: @escaping (Swift.Result<SberIdSDK.SIDAppTokenResponse, SberIdSDK.SIDError>) -> Swift.Void)
  @objc @available(*, deprecated, renamed: "SID.login.deleteAppToken", message: "\nДля удаления токена используйте метод SID.login.deleteAppToken()")
  public static func deleteAppToken()
  @available(*, deprecated, renamed: "SID.login.goToPartnerSSO", message: "\nДля бесшовного перехода используйте метод SID.login.goToPartnerSSO(...)")
  @discardableResult
  public static func goToPartnerSSO(partnerWebLink: Swift.String, partnerClientId: Swift.String?, partnerColor: UIKit.UIColor?, openIn: SberIdSDK.SIDOpenInType?) -> SberIdSDK.SIDError?
  @objc @available(*, deprecated, renamed: "SID.login.sendOtherAuth", message: "\nДля отправки метрики используйте метод SID.login.sendOtherAuth(...)")
  public static func sendOtherAuth(serviceName: Swift.String, result: SberIdSDK.SIDResult, userAuthorizationType: SberIdSDK.SIDUserAuthorizationType)
  @objc @available(*, deprecated, renamed: "SID.login.sendOtherAuth", message: "\nДля отправки метрики используйте метод SID.login.sendOtherAuth(...)")
  public static func sendOtherAuth(service: SberIdSDK.SIDAuthServiceType, result: SberIdSDK.SIDResult, userAuthorizationType: SberIdSDK.SIDUserAuthorizationType)
}
@available(iOS, unavailable, renamed: "SIDLoginButtonObserverProtocol")
@objc public protocol LoginButtonObserverProtocol {
}
@objc public protocol SIDLoginButtonObserverProtocol {
  @objc func loginButtonWasHidden()
}
extension SberIdSDK.SIDUIPreferences {
  @available(*, deprecated, message: "\nSIDUIPreferences(texts:, themeColor:, primaryColor:, secondaryColor:, fonts:, elkErrorType:)")
  convenience public init(appName: Swift.String?, themeColorLight: UIKit.UIColor?, themeColorDark: UIKit.UIColor? = nil, semiboldFont: UIKit.UIFont? = nil, mediumFont: UIKit.UIFont? = nil, isShowErrorOnMain: Swift.Bool? = nil)
  @available(*, deprecated, message: "\nSIDUIPreferences(texts:, themeColor:, primaryColor:, secondaryColor:, fonts:, elkErrorType:)")
  convenience public init(themeColorLight: UIKit.UIColor?, themeColorDark: UIKit.UIColor? = nil, semiboldFont: UIKit.UIFont? = nil, mediumFont: UIKit.UIFont? = nil, isShowErrorOnMain: Swift.Bool? = nil)
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class SIDAppTokenRequest : ObjectiveC.NSObject {
  @objc final public var scope: Swift.String
  @objc final public var state: Swift.String
  @objc final public var nonce: Swift.String
  @objc final public var redirectUri: Swift.String
  @objc final public var codeChallenge: Swift.String?
  @objc final public var codeChallengeMethod: Swift.String?
  @objc public init(scope: Swift.String, state: Swift.String, nonce: Swift.String, redirectUri: Swift.String, codeChallenge: Swift.String?, codeChallengeMethod: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
public enum SIDOpenInType : Swift.String, Swift.CaseIterable, Swift.Codable {
  case webView
  case browser
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SberIdSDK.SIDOpenInType]
  public typealias RawValue = Swift.String
  public static var allCases: [SberIdSDK.SIDOpenInType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol SIDTableViewHeightDelegate {
  @objc func updateHeight()
}
public enum SIDErrorTypes : Swift.Int {
  case type1
  case type2
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class SIDLogin : ObjectiveC.NSObject {
  @objc final public func auth(withSberId request: SberIdSDK.SIDAuthRequest, viewController: UIKit.UIViewController)
  @objc final public func autoAuth(request: SberIdSDK.SIDAuthRequest, completion: @escaping ((Swift.Bool) -> Swift.Void))
  @objc @discardableResult
  final public func webAuth(sberIdRequest request: SberIdSDK.SIDAuthRequest, svcRedirectUrlString: Swift.String, viewController: UIKit.UIViewController) -> Swift.Bool
  @objc final public func getResponseFrom(_ url: Foundation.URL, completion: (SberIdSDK.SIDAuthResponse) -> Swift.Void)
  @objc final public func sendOtherAuth(serviceName: Swift.String, result: SberIdSDK.SIDResult, userAuthorizationType: SberIdSDK.SIDUserAuthorizationType)
  @objc final public func sendOtherAuth(service: SberIdSDK.SIDAuthServiceType, result: SberIdSDK.SIDResult, userAuthorizationType: SberIdSDK.SIDUserAuthorizationType)
  final public func checkAppTokenIsValid() -> Swift.Result<Swift.Bool, SberIdSDK.SIDError>
  final public func refreshAppToken(request: SberIdSDK.SIDAppTokenRequest, completion: @escaping (Swift.Result<SberIdSDK.SIDAppTokenResponse, SberIdSDK.SIDError>) -> Swift.Void)
  @objc final public func deleteAppToken()
  @discardableResult
  final public func goToPartnerSSO(partnerWebLink: Swift.String, partnerClientId: Swift.String?, partnerColor: UIKit.UIColor?, openIn: SberIdSDK.SIDOpenInType?) -> SberIdSDK.SIDError?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class SIDColor : ObjectiveC.NSObject {
  @objc final public var light: UIKit.UIColor
  @objc final public var dark: UIKit.UIColor
  @objc public init(light: UIKit.UIColor, dark: UIKit.UIColor)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class SIDAuthRequest : ObjectiveC.NSObject {
  @objc public static let challengeMethod: Swift.String
  @objc final public var scope: Swift.String
  @objc final public var state: Swift.String
  @objc final public var nonce: Swift.String
  @objc final public var redirectUri: Swift.String
  @objc final public var ssoBaseUrl: Swift.String?
  @objc final public var codeChallenge: Swift.String?
  @objc final public var codeChallengeMethod: Swift.String?
  @objc final public var loginHint: Swift.String?
  @objc public init(scope: Swift.String, state: Swift.String, nonce: Swift.String, redirectUri: Swift.String, ssoBaseUrl: Swift.String? = nil, codeChallenge: Swift.String?, codeChallengeMethod: Swift.String?, loginHint: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS, unavailable, renamed: "SIDCornerRadiusStyle")
@objc public enum CornerRadiusStyle : Swift.Int {
  case no
  case normal
  case max
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SIDCornerRadiusStyle : Swift.Int {
  case no
  case normal
  case max
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class SIDSettings : ObjectiveC.NSObject {
  final public func applyMainPreferences(clientID: Swift.String? = nil, userID: Swift.String? = nil, partnerName: Swift.String? = nil, partnerProfileUrl: Swift.String? = nil, stand: SberIdSDK.SIDStandType? = .prom)
  @objc final public func applyUIPreferences(preferences: SberIdSDK.SIDUIPreferences)
  @objc deinit
}
public struct UIUtils {
  public static var getStatusBarHeight: CoreFoundation.CGFloat {
    get
  }
  public static var currentKeyWindow: UIKit.UIWindow? {
    get
  }
  public static var currentActiveKeyWindow: UIKit.UIWindow? {
    get
  }
  public static var keyWindowSize: CoreFoundation.CGSize {
    get
  }
}
@objc public enum SIDResult : Swift.Int {
  case success
  case fail
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SIDStandType : Swift.Int, Swift.Equatable {
  case prom
  case ift
  case psi
  case iftCloud
  case psiCloud
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class SIDAuthResponse : ObjectiveC.NSObject {
  @objc final public var isSuccess: Swift.Bool {
    get
  }
  @objc final public var nonce: Swift.String {
    get
  }
  @objc final public var state: Swift.String? {
    get
  }
  @objc final public var authCode: Swift.String? {
    get
  }
  @objc final public var appToken: Swift.String? {
    get
  }
  @objc final public var error: Swift.String? {
    get
  }
  @objc deinit
}
@objc public enum SIDUserAuthorizationType : Swift.Int {
  case existingUser
  case newUser
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS, unavailable, renamed: "SIDLoginButtonStyle")
extension SberIdSDK.LoginButtonStyle : Swift.Equatable {}
@available(iOS, unavailable, renamed: "SIDLoginButtonStyle")
extension SberIdSDK.LoginButtonStyle : Swift.Hashable {}
@available(iOS, unavailable, renamed: "SIDLoginButtonStyle")
extension SberIdSDK.LoginButtonStyle : Swift.RawRepresentable {}
extension SberIdSDK.SIDLoginButtonStyle : Swift.Equatable {}
extension SberIdSDK.SIDLoginButtonStyle : Swift.Hashable {}
extension SberIdSDK.SIDLoginButtonStyle : Swift.RawRepresentable {}
extension SberIdSDK.SIDErrorType : Swift.Equatable {}
extension SberIdSDK.SIDErrorType : Swift.Hashable {}
@available(iOS, unavailable, renamed: "SIDLoginButtonTextType")
extension SberIdSDK.LoginButtonTextType : Swift.Equatable {}
@available(iOS, unavailable, renamed: "SIDLoginButtonTextType")
extension SberIdSDK.LoginButtonTextType : Swift.Hashable {}
@available(iOS, unavailable, renamed: "SIDLoginButtonTextType")
extension SberIdSDK.LoginButtonTextType : Swift.RawRepresentable {}
extension SberIdSDK.SIDLoginButtonTextType : Swift.Equatable {}
extension SberIdSDK.SIDLoginButtonTextType : Swift.Hashable {}
extension SberIdSDK.SIDLoginButtonTextType : Swift.RawRepresentable {}
@available(iOS, unavailable, renamed: "SIDAuthServiceType")
extension SberIdSDK.AuthServiceType : Swift.Equatable {}
@available(iOS, unavailable, renamed: "SIDAuthServiceType")
extension SberIdSDK.AuthServiceType : Swift.Hashable {}
@available(iOS, unavailable, renamed: "SIDAuthServiceType")
extension SberIdSDK.AuthServiceType : Swift.RawRepresentable {}
extension SberIdSDK.SIDAuthServiceType : Swift.Equatable {}
extension SberIdSDK.SIDAuthServiceType : Swift.Hashable {}
extension SberIdSDK.SIDAuthServiceType : Swift.RawRepresentable {}
extension SberIdSDK.SIDOpenInType : Swift.Equatable {}
extension SberIdSDK.SIDOpenInType : Swift.Hashable {}
extension SberIdSDK.SIDOpenInType : Swift.RawRepresentable {}
extension SberIdSDK.SIDErrorTypes : Swift.Equatable {}
extension SberIdSDK.SIDErrorTypes : Swift.Hashable {}
extension SberIdSDK.SIDErrorTypes : Swift.RawRepresentable {}
@available(iOS, unavailable, renamed: "SIDCornerRadiusStyle")
extension SberIdSDK.CornerRadiusStyle : Swift.Equatable {}
@available(iOS, unavailable, renamed: "SIDCornerRadiusStyle")
extension SberIdSDK.CornerRadiusStyle : Swift.Hashable {}
@available(iOS, unavailable, renamed: "SIDCornerRadiusStyle")
extension SberIdSDK.CornerRadiusStyle : Swift.RawRepresentable {}
extension SberIdSDK.SIDCornerRadiusStyle : Swift.Equatable {}
extension SberIdSDK.SIDCornerRadiusStyle : Swift.Hashable {}
extension SberIdSDK.SIDCornerRadiusStyle : Swift.RawRepresentable {}
extension SberIdSDK.SIDResult : Swift.Equatable {}
extension SberIdSDK.SIDResult : Swift.Hashable {}
extension SberIdSDK.SIDResult : Swift.RawRepresentable {}
extension SberIdSDK.SIDStandType : Swift.Hashable {}
extension SberIdSDK.SIDStandType : Swift.RawRepresentable {}
extension SberIdSDK.SIDUserAuthorizationType : Swift.Equatable {}
extension SberIdSDK.SIDUserAuthorizationType : Swift.Hashable {}
extension SberIdSDK.SIDUserAuthorizationType : Swift.RawRepresentable {}
